name: "release_github_package"

on:
  push:
    branches: [main]
    paths:
      - "src/**"
      - "script/**"
      - .github/workflows/release-github-package.yml
  #workflow_run:
  #  workflows: ["Build image for ubuntu22"]
  #  types:
  #    - completed

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io
  APPMESH_VERSION: "2.1.2"

permissions: # added using https://github.com/step-security/secure-workflows
  contents: read
  id-token: write
  attestations: write

jobs:
  build:
    # https://github.com/Overv/openstreetmap-tile-server/blob/master/.github/workflows/build-and-test.yaml
    strategy:
      matrix:
        include:
          - arch: arm64
            variant: v8
          - arch: amd64

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout Github code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.arch }}

      - name: Install venv
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-venv

      - name: Download Syft
        id: syft
        uses: anchore/sbom-action/download-syft@v0.17.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      # https://www.stereolabs.com/docs/docker/building-arm-container-on-x86/
      - name: build on ubuntu24
        run: |
          BUILD_DIR=${{ matrix.arch }}
          docker run --platform ${{ matrix.arch }} --rm --volume ${{ github.workspace }}:/workspace --workdir /workspace laoshanxi/appmesh:build_ubuntu24 /bin/bash --login -c "mkdir ubuntu24_$BUILD_DIR; cd ubuntu24_$BUILD_DIR; cmake -DOPENSSL_ROOT_DIR=/usr/local/ssl ..; make -j4; make pack; ls; make test ARGS='-V'"

      - name: build on ubuntu22
        run: |
          if [ "${{ matrix.arch }}" == "amd64" ]; then
            BUILD_DIR=${{ matrix.arch }}
            docker run --platform ${{ matrix.arch }} --rm --volume ${{ github.workspace }}:/workspace --workdir /workspace laoshanxi/appmesh:build_ubuntu22 /bin/bash --login -c "mkdir ubuntu22_$BUILD_DIR; cd ubuntu22_$BUILD_DIR; cmake -DOPENSSL_ROOT_DIR=/usr/local/ssl ..; make -j4; make pack; ls; make test ARGS='-V'"
          fi

      - name: build on ubuntu18
        run: |
          BUILD_DIR=${{ matrix.arch }}
          docker run --platform ${{ matrix.arch }} --rm --volume ${{ github.workspace }}:/workspace --workdir /workspace laoshanxi/appmesh:build_ubuntu18 /bin/bash --login -c "mkdir ubuntu18_$BUILD_DIR; cd ubuntu18_$BUILD_DIR; cmake -DOPENSSL_ROOT_DIR=/usr/local/ssl ..; make -j4; make pack; ls; make test ARGS='-V'"

      - name: build on centos7
        run: |
          if [ "${{ matrix.arch }}" == "amd64" ]; then
            BUILD_DIR=${{ matrix.arch }}
            docker run --platform ${{ matrix.arch }} --rm --volume ${{ github.workspace }}:/workspace --workdir /workspace laoshanxi/appmesh:build_centos7 /bin/bash --login -c "mkdir centos7_$BUILD_DIR; cd centos7_$BUILD_DIR; cmake -DOPENSSL_ROOT_DIR=/usr/local/ssl ..; make -j4; make pack; ls; make test ARGS='-V'"
          fi

      - name: Generate SBOM for ubuntu:latest amd64
        run: |
          if [ "${{ matrix.arch }}" == "amd64" ]; then
            docker run --platform ${{ matrix.arch }} --rm --volume ${{ github.workspace }}:/workspace --workdir /workspace laoshanxi/appmesh:build_ubuntu /bin/bash --login -c "mkdir syft_$BUILD_DIR; cd syft_$BUILD_DIR; cmake ..; make -j4; make pack; ls; make test ARGS='-V'"
            BUILD_DIR_SYFT=${{ github.workspace }}/syft_${{ matrix.arch }}
            sudo python3 -m venv $BUILD_DIR_SYFT/home/venv
            source $BUILD_DIR_SYFT/home/venv/bin/activate
            sudo $BUILD_DIR_SYFT/home/venv/bin/pip3 install appmesh
            ${{ steps.syft.outputs.cmd }} scan $BUILD_DIR_SYFT/home/ -c ${{ github.workspace }}/script/syft.yaml --source-name app-mesh --source-version ${{ env.APPMESH_VERSION }}
            SBOM_JSON_FILE=${{ github.workspace }}/appmesh.${{ env.APPMESH_VERSION }}.sbom.spdx.json
            mv sbom.spdx.json $SBOM_JSON_FILE
          fi

      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.arch }}-${{ github.sha }}
          path: |
            ubuntu*/*.deb
            ubuntu*/*.rpm
            *.sbom.spdx.json
            centos*/*.deb
            centos*/*.rpm

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - name: Download arm64 packages
        uses: actions/download-artifact@v4
        with:
          name: arm64-${{ github.sha }}
      - name: Download amd64 packages
        uses: actions/download-artifact@v4
        with:
          name: amd64-${{ github.sha }}

      - name: Generate Changelog
        run: |
          echo "1. Object design for Python SDK" >> CHANGELOG.txt
          echo "2. CentOS7 compatible" >> CHANGELOG.txt
          echo "3. SSL for all connections" >> CHANGELOG.txt
          echo "4. GPG sign packages (rpm/dpkg --import gpg_public.key)" >> CHANGELOG.txt
          echo "5. Generate SBOM file" >> CHANGELOG.txt
          echo "6. YAML file format for application" >> CHANGELOG.txt
          echo "7. Delegate request to cluster host" >> CHANGELOG.txt
          ls -R

      - name: Install gpg dependency
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm dpkg-sig gnupg2

      # generate gpg key
      # https://gist.github.com/fernandoaleman/1376720
      # https://github.com/marketplace/actions/import-gpg
      # gpg --batch --passphrase $GPG_PASSPHRASE --quick-generate-key "appmesh <178029200@qq.com>" rsa4096
      # GPG_PRIVATE_KEY=$(gpg --armor --export-secret-keys --pinentry-mode loopback --passphrase $GPG_PASSPHRASE)
      # GPG_KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep -oP '^sec\s+\K\S+' | grep -oP '[^/]+$')
      # echo "$GPG_PRIVATE_KEY" | gpg --batch --import
      # echo "$GPG_PASSPHRASE" | gpg --batch --passphrase-fd 0 --pinentry-mode loopback --export-secret-key > ~/gpg.key
      # gpg --batch --import ~/gpg.key
      - name: Sign packages
        run: |
          # generate key
          gpg --batch --passphrase '' --quick-generate-key "appmesh <178029200@qq.com>" rsa4096
          gpg --list-keys
          # prepare for rpm sign
          gpg --export -a 'appmesh' > gpg_public.key
          rpm --import gpg_public.key
          rpm -q gpg-pubkey --qf '%{name}-%{version}-%{release} --> %{summary}\n'
          cat > ~/.rpmmacros <<EOF
          %_signature gpg
          %_gpg_path ~/.gnupg
          %_gpg_name appmesh
          %_gpgbin /usr/bin/gpg
          EOF
          # sign rpm pkg
          rpm --addsign */*.rpm
          rpm --checksig */*.rpm
          # sign deb pkg
          dpkg-sig --sign builder -k appmesh --gpg-options '--batch --pinentry-mode loopback' */*.deb
          dpkg-sig --verify */*.deb

      - name: Attest Build Provenance
        uses: actions/attest-build-provenance@v1.3.3
        with:
          subject-path: "*/*.rpm"

      # publish release
      # https://github.com/softprops/action-gh-release
      - name: Publish release
        uses: softprops/action-gh-release@v2
        with:
          body_path: CHANGELOG.txt
          name: "Python SDK"
          tag_name: ${{ env.APPMESH_VERSION }}
          fail_on_unmatched_files: false
          # note you'll typically need to create a personal access token
          # with permissions to create releases in the other repo
          token: ${{ secrets.PUBLISH_RELEASE }}
          files: |
            ubuntu*/*.deb
            ubuntu*/*.rpm
            *.sbom.spdx.json
            centos*/*.deb
            centos*/*.rpm
            gpg_public.key
