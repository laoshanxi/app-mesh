name: "Release AppMesh Package"

on:
  push:
    branches: [main]
    paths:
      - "src/**"
      - "script/**"
      - .github/workflows/release-github-package.yml

env:
  REGISTRY: docker.io
  APPMESH_VERSION: "2.1.2"

permissions: # added using https://github.com/step-security/secure-workflows
  contents: read
  id-token: write
  attestations: write

jobs:
  build:
    name: Build Platform Image
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        runner: [ubuntu-latest, ubuntu-24.04-arm]
        include:
          - runner: ubuntu-latest
            platform: linux/amd64
          - runner: ubuntu-24.04-arm
            platform: linux/arm64
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: Checkout Github code
        uses: actions/checkout@v4

      - name: Install venv
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-venv

      - name: Download Syft
        id: syft
        uses: anchore/sbom-action/download-syft@v0.18.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Build Ubuntu 24
        run: |
          BUILD_DIR=${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
          docker run --rm --volume ${{ github.workspace }}:/workspace --workdir /workspace laoshanxi/appmesh:build_ubuntu24 /bin/bash --login -c "set -e; mkdir ubuntu24_$BUILD_DIR; cd ubuntu24_$BUILD_DIR; cmake -DOPENSSL_ROOT_DIR=/usr/local/ssl ..; make -j'$(nproc)'; make pack; ls; make test ARGS='-V'"
          # Test
          docker run --rm --volume ${{ github.workspace }}:/workspace --workdir /workspace ubuntu:24.04 /bin/bash -c "set -e; cd ubuntu24_$BUILD_DIR; apt update; apt install -y ./appmesh_*.deb; /opt/appmesh/script/appmesh.initd.sh start; sleep 3; appc ls; appc resource"

      - name: Build Ubuntu 22
        run: |
          BUILD_DIR=${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
          docker run --rm --volume ${{ github.workspace }}:/workspace --workdir /workspace laoshanxi/appmesh:build_ubuntu22 /bin/bash --login -c "set -e; mkdir ubuntu22_$BUILD_DIR; cd ubuntu22_$BUILD_DIR; cmake -DOPENSSL_ROOT_DIR=/usr/local/ssl ..; make -j'$(nproc)'; make pack; ls; make test ARGS='-V'"

      - name: build on ubuntu18
        run: |
          BUILD_DIR=${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
          docker run --rm --volume ${{ github.workspace }}:/workspace --workdir /workspace laoshanxi/appmesh:build_ubuntu18 /bin/bash --login -c "set -e; mkdir ubuntu18_$BUILD_DIR; cd ubuntu18_$BUILD_DIR; cmake -DOPENSSL_ROOT_DIR=/usr/local/ssl ..; make -j'$(nproc)'; make pack; ls; make test ARGS='-V'"

      - name: build on centos7
        run: |
          BUILD_DIR=${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
          if [ "${BUILD_DIR}" == "amd64" ]; then
            docker run --rm --volume ${{ github.workspace }}:/workspace --workdir /workspace laoshanxi/appmesh:build_centos7 /bin/bash --login -c "set -e; mkdir centos7_$BUILD_DIR; cd centos7_$BUILD_DIR; cmake -DOPENSSL_ROOT_DIR=/usr/local/ssl ..; make -j'$(nproc)'; make pack; ls; make test ARGS='-V'"
          fi

      - name: Generate SBOM for ubuntu:latest amd64
        run: |
          BUILD_DIR=${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
          if [ "${BUILD_DIR}" == "amd64" ]; then
            docker run --rm --volume ${{ github.workspace }}:/workspace --workdir /workspace laoshanxi/appmesh:build_ubuntu /bin/bash --login -c "set -e; mkdir syft_$BUILD_DIR; cd syft_$BUILD_DIR; cmake ..; make -j'$(nproc)'; make pack; ls; make test ARGS='-V'"
            BUILD_DIR_SYFT=${{ github.workspace }}/syft_${BUILD_DIR}
            sudo python3 -m venv $BUILD_DIR_SYFT/home/venv
            source $BUILD_DIR_SYFT/home/venv/bin/activate
            sudo $BUILD_DIR_SYFT/home/venv/bin/pip3 install appmesh
            ${{ steps.syft.outputs.cmd }} scan $BUILD_DIR_SYFT/home/ -c ${{ github.workspace }}/script/syft.yaml --source-name app-mesh --source-version ${{ env.APPMESH_VERSION }}
            SBOM_JSON_FILE=${{ github.workspace }}/appmesh.${{ env.APPMESH_VERSION }}.sbom.spdx.json
            mv sbom.spdx.json $SBOM_JSON_FILE
          fi

      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}-${{ github.sha }}
          path: |
            ubuntu*/*.deb
            ubuntu*/*.rpm
            *.sbom.spdx.json
            centos*/*.deb
            centos*/*.rpm

  deploy:
    name: Sign and Release Packages
    needs: build
    runs-on: ubuntu-22.04
    if: github.event_name != 'pull_request'
    timeout-minutes: 10

    steps:
      - name: Download arm64 packages
        uses: actions/download-artifact@v4
        with:
          name: amd64-${{ github.sha }}
      - name: Download amd64 packages
        uses: actions/download-artifact@v4
        with:
          name: arm64-${{ github.sha }}

      - name: Generate Changelog
        run: |
          echo "1. Enhanced object design in Python SDK" >> CHANGELOG.txt
          echo "2. CentOS 7 compatibility" >> CHANGELOG.txt
          echo "3. SSL enabled for all connections" >> CHANGELOG.txt
          echo "4. GPG signing for RPM and DPKG packages (use 'rpm/dpkg --import gpg_public.key')" >> CHANGELOG.txt
          echo "5. Generated SBOM (Software Bill of Materials) file" >> CHANGELOG.txt
          echo "6. YAML format support for application configuration" >> CHANGELOG.txt
          echo "7. Cluster host request forwarding" >> CHANGELOG.txt
          echo "8. JWT authentication for client requests" >> CHANGELOG.txt
          echo "9. PSK authentication for requests from App Mesh agent to engine" >> CHANGELOG.txt
          echo "10. PSK authentication for Docker requests from App Mesh engine to agent" >> CHANGELOG.txt
          ls -R

      - name: Install gpg dependency
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm dpkg-sig gnupg2

      - name: Sign Packages
        run: |
          # generate key
          gpg --batch --passphrase '' --quick-generate-key "appmesh <178029200@qq.com>" rsa4096
          gpg --list-keys
          # prepare for rpm sign
          gpg --export -a 'appmesh' > gpg_public.key
          rpm --import gpg_public.key
          rpm -q gpg-pubkey --qf '%{name}-%{version}-%{release} --> %{summary}\n'
          cat > ~/.rpmmacros <<EOF
          %_signature gpg
          %_gpg_path ~/.gnupg
          %_gpg_name appmesh
          %_gpgbin /usr/bin/gpg
          EOF
          # sign rpm pkg
          rpm --addsign */*.rpm
          rpm --checksig */*.rpm
          # sign deb pkg
          dpkg-sig --sign builder -k appmesh --gpg-options '--batch --pinentry-mode loopback' */*.deb
          dpkg-sig --verify */*.deb

      - name: Attest Build Provenance
        uses: actions/attest-build-provenance@v2.2.0
        with:
          subject-path: "*/*.rpm"

      - name: Release Packages
        uses: softprops/action-gh-release@v2
        with:
          body_path: CHANGELOG.txt
          name: "SDK & Security enhancement"
          tag_name: ${{ env.APPMESH_VERSION }}
          fail_on_unmatched_files: false
          token: ${{ secrets.PUBLISH_RELEASE }}
          files: |
            ubuntu*/*.deb
            ubuntu*/*.rpm
            *.sbom.spdx.json
            centos*/*.deb
            centos*/*.rpm
            gpg_public.key
