name: "Release AppMesh Container Image"

on:
  push:
    branches:
      - main
    paths:
      - Dockerfile
      - .github/workflows/release-appmesh-image.yml
  workflow_run:
    workflows: ["release_github_package"]
    types:
      - completed

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_IMAGE: laoshanxi/appmesh
  APPMESH_VERSION: "2.1.2"

permissions:
  contents: read

jobs:
  build:
    name: Build Platform Image
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        runner: [ubuntu-latest, ubuntu-24.04-arm]
        include:
          - runner: ubuntu-latest
            platform: linux/amd64
          - runner: ubuntu-24.04-arm
            platform: linux/arm64
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: Checkout Github code
        uses: actions/checkout@v4

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ matrix.platform }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}

      - name: Build and Push Platform Image
        id: build-platform
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          no-cache: true
          platforms: ${{ matrix.platform }}
          push: true
          provenance: false
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ env.APPMESH_VERSION }}-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
          labels: ${{ steps.meta.outputs.labels }}

  merge-and-push:
    name: Merge and Release Multi-arch Image
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create Multi-arch Manifests
        run: |
          for tag in ${{ env.APPMESH_VERSION }} latest; do
            docker buildx imagetools create -t ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${tag} \
              ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ env.APPMESH_VERSION }}-amd64 \
              ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ env.APPMESH_VERSION }}-arm64
          done

      - name: Cleanup Platform Tags
        run: |
          set -e
          TOKEN=$(curl -s -X POST -H "Content-Type: application/json" \
            -d '{"username": "'${{ secrets.DOCKERHUB_USERNAME }}'", "password": "'${{ secrets.DOCKERHUB_TOKEN }}'"}' \
            https://hub.docker.com/v2/users/login/ | jq -r .token)
          
          for arch in amd64 arm64; do
            IMAGE_URL="https://hub.docker.com/v2/repositories/${{ env.DOCKER_IMAGE }}/tags/${{ env.APPMESH_VERSION }}-${arch}/"
            curl -X DELETE -H "Authorization: Bearer ${TOKEN}" ${IMAGE_URL} || echo "Failed to delete ${arch} tag"
          done

      - name: Verify Image
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ env.APPMESH_VERSION }}
          shell: bash
          run: |
            timeout 30s /entrypoint.sh &
            sleep 5
            appc ls && appc resource
