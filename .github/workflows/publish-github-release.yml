name: "Publish Github release"

on:
  push:
    branches: [main]
    paths:
      - "src/**"
      - "script/**"
      - ".github/workflows/publish-github-release.yml"
  #workflow_run:
  #  workflows: ["Build image for ubuntu20"]
  #  types:
  #    - completed

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io
  APPMESH_VERSION: "2.1.1"

permissions: # added using https://github.com/step-security/secure-workflows
  contents: read

jobs:
  build:
    # https://github.com/Overv/openstreetmap-tile-server/blob/master/.github/workflows/build-and-test.yaml
    strategy:
      matrix:
        include:
          - arch: arm64
            variant: v8
          - arch: amd64

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout Github code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: ${{ matrix.arch }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      # https://www.stereolabs.com/docs/docker/building-arm-container-on-x86/
      - name: build with ubuntu22
        run: |
          build_dir=${{ matrix.arch }}
          docker run --platform ${{ matrix.arch }} --rm --volume ${{ github.workspace }}:/workspace --workdir /workspace laoshanxi/appmesh:build_ubuntu22  /bin/sh -c "mkdir ubuntu22_$build_dir; cd ubuntu22_$build_dir; cmake ..; make -j4; make pack; ls; make test ARGS='-V'"

      - name: build with ubuntu20
        run: |
          build_dir=${{ matrix.arch }}
          docker run --platform ${{ matrix.arch }} --rm --volume ${{ github.workspace }}:/workspace --workdir /workspace laoshanxi/appmesh:build_ubuntu20  /bin/sh -c "mkdir ubuntu20_$build_dir; cd ubuntu20_$build_dir; cmake ..; make -j4; make pack; ls; make test ARGS='-V'"

      - name: build with ubuntu18
        run: |
          build_dir=${{ matrix.arch }}
          docker run --platform ${{ matrix.arch }} --rm --volume ${{ github.workspace }}:/workspace --workdir /workspace laoshanxi/appmesh:build_ubuntu18  /bin/sh -c "mkdir ubuntu18_$build_dir; cd ubuntu18_$build_dir; cmake ..; make -j4; make pack; ls; make test ARGS='-V'"

      - name: Upload packages
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.arch }}
          path: |
            ubuntu*/*.deb
            ubuntu*/*.rpm

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - name: Download arm64 packages
        uses: actions/download-artifact@v3
        with:
          name: arm64
      - name: Download amd64 packages
        uses: actions/download-artifact@v3
        with:
          name: amd64

      - name: Generate Changelog
        run: |
          echo "1. libcpr replace cpprestsdk" >> CHANGELOG.txt
          echo "2. TCP socket enable SSL" >> CHANGELOG.txt
          ls -R

      # publish release
      # https://github.com/softprops/action-gh-release
      - name: Publish release
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG.txt
          name: "SDK & Network improvements"
          tag_name: ${{ env.APPMESH_VERSION }}
          fail_on_unmatched_files: false
          # note you'll typically need to create a personal access token
          # with permissions to create releases in the other repo
          token: ${{ secrets.PUBLISH_RELEASE }}
          files: |
            ubuntu*/*.deb
            ubuntu*/*.rpm
