name: Build docker image for build appmesh engine

on:
  push:
    branches:
      - main
    paths:
      - ".github/workflows/build-third-party-image.yml"
      - "autogen.sh"
      - "docker/**"

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: laoshanxi/appmesh

jobs:
  build-and-push-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout Github code
        uses: actions/checkout@v2

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

      # https://github.com/docker/login-action
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image for centos 7
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          file: docker/Dockerfile.build_centos7
          no-cache: true
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:build_centos7

      - name: Build and push Docker image for centos 8
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          file: docker/Dockerfile.build_centos8
          no-cache: true
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:build_centos8

      - name: Build and push Docker image for ubuntu 18
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          file: docker/Dockerfile.build_ubuntu18
          no-cache: true
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:build_ubuntu18

      - name: Build and push Docker image for ubuntu 20
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          file: docker/Dockerfile.build_ubuntu20
          no-cache: true
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:build_ubuntu20

#############################################################
# manually steps
#############################################################
#IMAGE_NAME=laoshanxi/appmesh:build_ubuntu20
#rm -rf app-mesh
#docker rmi ubuntu:20.04 -f
#git clone --depth=1 https://github.com/laoshanxi/app-mesh.git
#cd app-mesh
#! docker rmi -f ${IMAGE_NAME}
#! docker rmi ubuntu:20.04
#docker build --no-cache -f docker/Dockerfile.build.ubuntu20 -t ${IMAGE_NAME} .
#docker push ${IMAGE_NAME}
