diff --git a/CMakeLists.txt b/CMakeLists.txt
index 44d174a..95da232 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -28,14 +28,14 @@ if (CMAKE_BUILD_TYPE MATCHES "Debug" OR CMAKE_BUILD_TYPE MATCHES "DEBUG")
     set(CMAKE_CXX_FLAGS_DEBUG   "$ENV{CXXFLAGS} -Wall -ggdb3 -O0 -g")
 else()
     if (CMAKE_BUILD_TYPE MATCHES "Asan" OR CMAKE_BUILD_TYPE MATCHES "ASAN")
-	    # https://github.com/google/sanitizers/wiki/AddressSanitizerFlags
+        # https://github.com/google/sanitizers/wiki/AddressSanitizerFlags
         message("Debug mode with libasan")
         set(CMAKE_CXX_FLAGS_DEBUG   "$ENV{CXXFLAGS} -Wall -ggdb3 -O0 -g -fsanitize=address -fno-omit-frame-pointer")
-	    set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address -lasan -lstdc++")
-	else()
+        set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address -lasan -lstdc++")
+    else()
         message("Release mode")
         set(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -Wall -ggdb3 -Os")
-	endif()
+    endif()
 endif()
 message("COMPILE_OPTIONS: ${COMPILE_OPTIONS}")

diff --git a/autogen.sh b/autogen.sh
index 9eafab1..c8021f4 100644
--- a/autogen.sh
+++ b/autogen.sh
@@ -154,8 +154,8 @@ if [ true ]; then
 	sh cmake-$version.$build-$os-x86_64.sh --prefix=/usr/local/ --skip-license
 fi

-#install fpm
-gem install fpm
+# install fpm, workaround for fpm install failure
+gem install fpm || gem install public_suffix -v 4.0.7 && gem install fpm

 # build boost_1_74_0
 if [ true ]; then
@@ -263,9 +263,9 @@ fi

 cd $ROOTDIR
 # protocol buffer
-PROTOCOL_BUFFER_VER=3.19.3
 # https://developers.google.com/protocol-buffers
 if [ true ]; then
+	PROTOCOL_BUFFER_VER=3.19.6
 	# $WGWT_A https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOCOL_BUFFER_VER}/protoc-${PROTOCOL_BUFFER_VER}-linux-$(arch).zip
 	# unzip protoc-${PROTOCOL_BUFFER_VER}-linux-$(arch).zip -d /usr/local/
 	$WGWT_A https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOCOL_BUFFER_VER}/protobuf-cpp-${PROTOCOL_BUFFER_VER}.zip
diff --git a/docs/source/success/python_parallel_run.md b/docs/source/success/python_parallel_run.md
index 9a2961b..e713ab2 100644
--- a/docs/source/success/python_parallel_run.md
+++ b/docs/source/success/python_parallel_run.md
@@ -5,7 +5,7 @@ Python does not support real threads to run something parallel, with App Mesh, P
 Use SDK AppMeshClient.run_async() to run process or Python code segment by App Mesh.

 ### 1. Install App Mesh
-[Installation Guide](../Install.md#native-installation)
+[Installation Guide](https://app-mesh.readthedocs.io/en/latest/Install.html#native-installation)

 ### 2. Python sample
 ```python
diff --git a/go.mod b/go.mod
index 8d407f8..ad2e301 100644
--- a/go.mod
+++ b/go.mod
@@ -7,5 +7,5 @@ require (
 	github.com/klauspost/compress v1.15.5 // indirect
 	github.com/rs/xid v1.4.0
 	github.com/valyala/fasthttp v1.37.0
-	google.golang.org/protobuf v1.28.0
+	google.golang.org/protobuf v1.28.1
 )
diff --git a/go.sum b/go.sum
index 4ea5b50..ea9f39b 100644
--- a/go.sum
+++ b/go.sum
@@ -31,5 +31,5 @@ golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGm
 golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543 h1:E7g+9GITq07hpfrRu66IVDexMakfv52eLZ2CXBWiKr4=
 golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=
-google.golang.org/protobuf v1.28.0 h1:w43yiav+6bVFTBQFZX0r7ipe9JQ1QsbMgHwbBziscLw=
-google.golang.org/protobuf v1.28.0/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=
+google.golang.org/protobuf v1.28.1 h1:d0NfwRgPtno5B1Wa6L2DAG+KivqkdutMf1UhdNx175w=
+google.golang.org/protobuf v1.28.1/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=
diff --git a/src/daemon/Configuration.cpp b/src/daemon/Configuration.cpp
index 4d98453..dbf4ba0 100644
--- a/src/daemon/Configuration.cpp
+++ b/src/daemon/Configuration.cpp
@@ -792,10 +792,16 @@ const web::json::value Configuration::getAgentAppJson() const
 		cmd += std::string(" -rest_tcp_port ") + std::to_string(Configuration::instance()->getRestTcpPort()) +
 			   " -agent_url " + restUri.to_uri().to_string();
 	}
-	if (Configuration::instance()->getDockerProxyAddress().length())
+	if (Configuration::instance()->getDockerProxyAddress().length() &&
+		Utility::isFileExist("/var/run/docker.pid") &&
+		os::pstree(1)->contains(std::stoi(Utility::readFile("/var/run/docker.pid"))))
 	{
 		cmd += std::string(" -docker_agent_url ") + this->getDockerProxyAddress();
 	}
+	else
+	{
+		LOG_DBG << fname << " docker agent not enabled";
+	}
 	if (Configuration::instance()->prometheusEnabled())
 	{
 		cmd += std::string(" -prom_exporter_port ") + std::to_string(Configuration::instance()->getPromListenPort());
diff --git a/src/daemon/main.cpp b/src/daemon/main.cpp
index e4cc309..a79dc96 100644
--- a/src/daemon/main.cpp
+++ b/src/daemon/main.cpp
@@ -125,10 +125,8 @@ int main(int argc, char *argv[])
 			{
 				throw std::runtime_error(std::string("Failed to listen with error: ") + std::strerror(errno));
 			}
-			Configuration::instance()->addApp(config->getAgentAppJson(), nullptr, false)->execute();
 			// start agent
-			auto app = Configuration::instance()->addApp(config->getAgentAppJson(), nullptr, false);
-			app->execute();
+			Configuration::instance()->addApp(config->getAgentAppJson(), nullptr, false)->execute();

 			// reg prometheus
 			config->registerPrometheus();
@@ -206,7 +204,6 @@ int main(int argc, char *argv[])
 	ACE_Reactor::instance()->end_reactor_event_loop();
 	for (const auto &t : m_threadPool)
 		t->join();
-	Utility::stopCpprestThreadPool();
 	LOG_INF << fname << "exited";
 	return 0;
 }
diff --git a/src/sdk/python/appmesh_client.py b/src/sdk/python/appmesh_client.py
index a70dacd..8fa60b9 100644
--- a/src/sdk/python/appmesh_client.py
+++ b/src/sdk/python/appmesh_client.py
@@ -886,7 +886,11 @@ class AppMeshClient(metaclass=abc.ABCMeta):


 class AppMeshClientTCP(AppMeshClient):
-    """Client object used to access App Mesh REST Service"""
+    """Client object used to access App Mesh REST Service
+
+    Dependency:
+        pip3 install protobuf
+    """

     def __init__(
         self,
